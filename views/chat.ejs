<!-- views/index.ejs -->
<!DOCTYPE html>
<html>
  <head>
    <title>Chat App</title>
    <link rel="stylesheet" href="/css/chat.css" />
    <link
      rel="stylesheet"
      href="https://cdnjs.cloudflare.com/ajax/libs/emojionearea/3.4.2/emojionearea.min.css"
      integrity="sha512-vEia6TQGr3FqC6h55/NdU3QSM5XR6HSl5fW71QTKrgeER98LIMGwymBVM867C1XHIkYD9nMTfWK2A0xcodKHNA=="
      crossorigin="anonymous"
      referrerpolicy="no-referrer"
    />
  </head>
  <body>
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.7.1/jquery.min.js"></script>
    <script
      src="https://cdnjs.cloudflare.com/ajax/libs/emojionearea/3.4.2/emojionearea.min.js"
      integrity="sha512-hkvXFLlESjeYENO4CNi69z3A1puvONQV5Uh+G4TUDayZxSLyic5Kba9hhuiNLbHqdnKNMk2PxXKm0v7KDnWkYA=="
      crossorigin="anonymous"
      referrerpolicy="no-referrer"
    ></script>
    <div class="container">
      <h1>You are <%= sender.email %>, Chatting With <%= recipient.email %></h1>
      <div class="chat-conatiner">
        <ul id="messages" class="message-list"></ul>
        <form id="form" action="" class="form-container">
          <input
            id="input"
            autocomplete="off"
            placeholder="Type a message..."
          />
          <script type="text/javascript">
            $("#input").emojioneArea({
              pickerPosition: "top",
            });
          </script>
          <label for="imageUpload" class="file-input-label"></label>
          <input
            type="file"
            accept="image/*"
            id="imageUpload"
            style="display: none"
          />
          <button>Send</button>
        </form>
      </div>

      <script src="/socket.io/socket.io.js"></script>
      <script>
        var socket = io();
        const form = document.getElementById("form");
        const input = document.getElementById("input");
        const messages = document.getElementById("messages");

        socket.emit("user connect", "<%= senderId %>");

        function uploadImageAndGetUrl(file) {
          return new Promise((resolve, reject) => {
            const reader = new FileReader();
            reader.onloadend = () => resolve(reader.result);
            reader.onerror = reject;
            reader.readAsDataURL(file);
          });
        }

        document
          .getElementById("form")
          .addEventListener("submit", async (e) => {
            e.preventDefault();
            const input = document.getElementById("input");
            const fileInput = document.getElementById("imageUpload");
            const file = fileInput.files[0];

            if (file) {
              // If there's a file, encode it to Base64 and send
              const base64 = await uploadImageAndGetUrl(file);
              const dataUrl = `data:image/${
                file.type.split("/")[1].split(";")[0]
              };base64,${base64.split(",")[1]}`;
              socket.emit("private message", {
                senderId: "<%= sender._id %>",
                senderEmail: "<%= sender.email %>",
                recipientId: "<%= recipientId %>",
                message: dataUrl, // Base64 string as the message
              });
              fileInput.value = "";
            } else if (input.value) {
              // If there's no file but there's text, send the text message
              socket.emit("private message", {
                senderId: "<%= sender._id %>",
                senderEmail: "<%= sender.email %>",
                recipientId: "<%= recipientId %>",
                message: input.value,
              });
              input.value = "";
            }
          });

        socket.on("recipient message", (data) => {
          if (data.deleted) return;
          const item = document.createElement("li");
          item.id = data.messageId;
          // console.log("Item.id ", item.id);
          if (data.senderEmail == "<%= sender.email %>") {
            item.classList.add("sent");
          } else {
            item.classList.add("received");
          }

          const senderEmailSpan = document.createElement("span");
          senderEmailSpan.style.fontWeight = "bold";
          senderEmailSpan.textContent = `${data.senderEmail}: `;

          const messageText = document.createTextNode(data.message);
          item.appendChild(senderEmailSpan);
          item.appendChild(messageText);

          if (data.message.startsWith("data:image")) {
            const img = document.createElement("img");
            img.src = data.message;
            img.style.maxWidth = "250px";
            img.style.height = "auto";
            item.appendChild(img);
          } else {
            item.appendChild(messageText);
          }

          if (data.senderEmail == "<%= sender.email %>") {
            const deleteButton = document.createElement("button");
            deleteButton.innerHTML = "🗑️";
            deleteButton.classList.add("delete-button");
            deleteButton.onclick = function () {
              socket.emit("delete message", data.messageId);
            };
            item.appendChild(deleteButton);
          }

          messages.appendChild(item);
          window.scrollTo(0, document.body.scrollHeight);
        });

        socket.on("message deleted", (messageId) => {
          const item = document.getElementById(messageId);
          if (item) {
            item.remove();
          }
        });

        socket.on("deletion error", (errorMessage) => {
          alert(errorMessage);
        });
      </script>
    </div>
    <% if (typeof error !== 'undefined') { %>
    <p style="color: red; margin: 0; padding-top: 5px"><%= error %></p>
    <% } %>
  </body>
</html>
